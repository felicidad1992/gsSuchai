ANEXOS 
/etc/init.d/controlradio
#!/bin/bash
PUERTO_SERIAL="/dev/icom"
MODELO="344"
BAUDRATE="19200"



case "$1" in

start)
    echo -n "Iniciando demonio de control de la radio                  "
    rigctld -r $PUERTO_SERIAL -m $MODELO -P RTS -s $BAUDRATE &
    if [ $? -eq 0 ]; then
        echo  -e "\e[01;34mLISTO\e[00m"
    else
        echo  -e "\e[01;31mERROR\e[00m"
        exit 1
    fi
;;
stop)

    echo -n "Deteniendo demonio de control de la radio                 "
    killall -9 rigctld 2>/dev/null >/dev/null
        if [ $? -eq 0 ]; then
                echo  -e "\e[01;34mLISTO\e[00m"
        else
                echo -e "\e[01;31mERROR\e[00m"
        exit 1
        fi
;;
status)
    if [ -n "$(ps -A|grep rigctld| cut -d ' ' -f 2)" ]; then
        echo -e "\e[01;34mControl de radio corriendo =)\e[00m"
    else
        echo -e "\e[01;31mControl de radio abajo\e[00m"

    fi
;;
restart)
    echo -n "Reiniciando demonio de control de la radio                "
    killall -9 rigctld 2>/dev/null >/dev/null  && rigctld -r $PUERTO_SERIAL -m $MODELO -P RTS -s $BAUDRATE & 2>/dev/null >/dev/null
        if [ $? -eq 0 ]; then
                echo  -e "\e[01;34mLISTO\e[00m"
        else
                echo -e "\e[01;31mERROR\e[00m"
        exit 1
        fi
;;
*)
    echo "Uso: controlrotor {start|stop|restart}"
    exit 1
esac

/etc/init.d/controlrotor
#!/bin/bash
PUERTO_SERIAL="/dev/rotor"
MODELO="201"
BAUDRATE="9600"


case "$1" in

start)
    echo -n "Iniciando demonio de control del rotor                    "
    rotctld -m $MODELO -r $PUERTO_SERIAL -s $BAUDRATE &
    if [ $? -eq 0 ]; then
        echo  -e "\e[01;34mLISTO\e[00m"
    else
        echo  -e "\e[01;31mERROR\e[00m"
        exit 1
    fi
;;
stop)

    echo -n "Deteniendo demonio de control del rotor                   "
    killall -9 rotctld 2>/dev/null >/dev/null
        if [ $? -eq 0 ]; then
                echo -e "\e[01;34mLISTO\e[00m"
        else
                echo -e "\e[01;31mERROR\e[00m"
        exit 1
        fi
;;
status)
        if [ -n "$(ps -A|grep rotctld| cut -d ' ' -f 2)" ]; then
                echo -e "\e[01;34mControl del rotor corriendo =)\e[00m"
        else
                echo -e "\e[01;31mControl del rotor abajo\e[00m"

        fi
;;
restart)
    echo -n "Reiniciando demonio de control de la radio                "
    killall -9 rotctld 2>/dev/null >/dev/null  && rotctld -m $MODELO -r $PUERTO_SERIAL -s $BAUDRATE & 2>/dev/null >/dev/null
        if [ $? -eq 0 ]; then
                echo  -e "\e[01;34mLISTO\e[00m"
        else
                echo -e "\e[01;31mERROR\e[00m"
        exit 1
        fi
;;
*)
    echo "Uso: controlrotor {start|stop|restart}"
    exit 1
esac

/etc/init.d/ser2net
#! /bin/bash
#
# ser2net    init script for ser2net
#
#        Written by Miquel van Smoorenburg <miquels@cistron.nl>.
#        Modified for Debian GNU/Linux
#        by Ian Murdock <imurdock@gnu.ai.mit.edu>.
#        Modified for ser2net by Marc Haber <mh+debian-packages@zugschlus.de>

### BEGIN INIT INFO
# Provides:          ser2net
# Required-Start:    $network
# Required-Stop:     $network
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Allows network connections to serial ports
# Description:       This daemon allows telnet and tcp sessions to be established with a unit's serial ports.
### END INIT INFO

set -e

if [ -r "/lib/lsb/init-functions" ]; then
  . /lib/lsb/init-functions
else
  echo "E: /lib/lsb/init-functions not found, lsb-base (>= 3.0-6) needed"
  exit 1
fi

if [ -n "$SER2NETDEBUG" ]; then
  echo "now debugging $0 $@"
  set -x
fi

LANG=C
export LANG

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/ser2net
NAME=ser2net
DESC="Serial port to network proxy"
PIDFILE=/var/run/$NAME.pid

test -f $DAEMON || exit 0


# Defaults
CONFFILE="/etc/ser2net.conf"
OPTIONS=""
CONTROLPORT=""

# Read config file (will override defaults above)
[ -r /etc/default/ser2net ] && . /etc/default/ser2net

# this is from madduck on IRC, 2006-07-06
# There should be a better possibility to give daemon error messages
# and/or to log things
log()
{
  case "$1" in
    [[:digit:]]*) success=$1; shift;;
    *) :;;
  esac
  log_action_begin_msg "$1"; shift
  log_action_end_msg ${success:-0} "$*"
}

start () {
  if ! pidofproc -p "$PIDFILE" >/dev/null; then
      start_daemon -p $PIDFILE $DAEMON ${CONTROLPORT:+-p} $CONTROLPORT -c $CONFFILE -P $PIDFILE $OPTIONS
      ret=$?
  else
    log_failure_msg "already running!"
    log_end_msg 1
    exit 1
  fi
  return $ret
}

stop () {
  # this is a workaround for #451529 as ser2net 2.5 does not delete its pidfile
  SIG="${1:--TERM}"
  killproc -p "$PIDFILE" "$DAEMON" "$SIG"
  # this is a workaround for killproc -TERM not zapping the pidfile
  if ! pidofproc -p "$PIDFILE" >/dev/null; then
    rm -f $PIDFILE
  fi
}

status()
{
  log_action_begin_msg "checking $DESC"
  if pidofproc -p "$PIDFILE" >/dev/null; then
    log_action_end_msg 0 "$NAME running"
  else
    if [ -e "$PIDFILE" ]; then
      log_action_end_msg 1 "$NAME failed"
      exit 1
    else
      log_action_end_msg 0 "$NAME not running"
      exit 3
    fi
  fi
}

if ! [ -e "$CONFFILE" ]; then
  log_failure_msg "Not starting ser2net: Conffile $CONFFILE missing"
  log_end_msg 1
  exit 1
fi

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    start
    log_end_msg 0
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    stop
    log_end_msg 0
    ;;
  reload|force-reload)
    log_daemon_msg "Reloading $DESC" "$NAME"
    stop "-HUP"
    log_end_msg 0
    ;;
  restart)
    log_daemon_msg "Restarting $DESC" "$NAME"
    stop
    sleep 1
    start
    log_end_msg 0
    ;;
  status)
      status
    ;;
  *)
    N=/etc/init.d/$NAME
    echo "Usage: $N {start|stop|restart|reload|force-reload|status}" >&2
    exit 1
    ;;
esac

exit 0




/etc/ser2net.conf
#
# This is the configuration file for ser2net.  It has the following format:
#  <TCP port>:<state>:<timeout>:<device>:<options>
#     TCP port
#            Name   or  number of the TCP/IP port to accept con-
#            nections from for this device.  A port number may
#            be of the form [host,]port, such as 127.0.0.1,2000
#            or localhost,2000.  If this is specified, it will
#            only bind to the IP address specified. Otherwise
#            it will bind to all the ports on the machine.
#
#     state  Either raw or rawlp or telnet or off.  off disables
#            the  port  from  accepting  connections.  It can be
#            turned on later from the control port.  raw enables
#            the port and  transfers  all data as-is between the
#            port  and  the long.  rawlp  enables  the port  and
#            transfers  all input data to device, device is open
#            without  any  termios  setting.  It  allow  to  use
#            /dev/lpX  devices  and  printers connected to them.
#            telnet enables the port and runs the telnet  proto-
#            col  on the port to set up telnet parameters.  This
#            is most useful for using telnet.
#
#     timeout
#            The time (in seconds) before the port will be  dis-
#            connected  if  there  is no activity on it.  A zero
#            value disables this funciton.
#
#     device The  name  of  the  device   to  connect  to.  This
#            must be in the form of /dev/<device>.
#
#     options
#            Sets  operational  parameters  for the serial port.
#            Options 300, 1200, 2400, 4800, 9600, 19200, 38400,
#            57600, 115200 set the various baud rates.  EVEN,
#            ODD, NONE set the parity.  1STOPBIT, 2STOPBITS set
#            the number of stop bits.  7DATABITS, 8DATABITS set
#            the number of data bits.  [-]XONXOFF turns on (-
#            off) XON/XOFF support.  [-]RTSCTS turns on (- off)
#            hardware flow control, [-]LOCAL turns off (- on)
#            monitoring of the modem lines, and
#            [-]HANGUP_WHEN_DONE turns on (- off) lowering the
#            modem control lines when the connextion is done.
#         NOBREAK disables automatic setting of the break
#         setting of the serial port.
#            The "remctl" option allow remote control (ala RFC
#            2217) of serial-port configuration.  A banner name
#            may also be specified, that banner will be printed
#            for the line.  If no banner is given, then no
#            banner is printed.
#
# or...

#  BANNER:<banner name>:banner
#    This will create a banner, if the banner name is given in the
#    options of a line, that banner will be printed.  This takes the
#    standard "C" \x characters (\r is carraige return, \n is newline,
#    etc.).  It also accepts \d, which prints the device name, \p,
#    which prints the TCP port number, and \s which prints the serial
#    parameters (eg 9600N81).  Banners can span lines if the last
#    character on a line is '\'.  Note that you *must* use \r\n to
#    start a new line.
#
# Note that the same device can be listed multiple times under different
# ports, this allows the same serial port to have both telnet and raw
# protocols.

# The original config file shipped with the upstream sources can be
# found in /usr/share/doc/ser2net/examples

BANNER:banner:\r\n==== Estacion Terrena  SUCHAI ====\r\nPowered by ser2net \r\nport\t: \p\r\ndevice\t: \d\r\n-----------------------------------\r\n

#2012:telnet:0:/dev/ttyS0:115200 8DATABITS NONE 1STOPBIT banner
2000:telnet:0:/dev/tnc:500000 8DATABITS NONE 1STOPBIT
2001:telnet:0:/dev/ttyUSB0:115200 8DATABITS NONE 1STOPBIT
#3000:telnet:600:/dev/ttyS0:19200 8DATABITS NONE 1STOPBIT banner
#3001:telnet:600:/dev/ttyS1:19200 8DATABITS NONE 1STOPBIT banner




/etc/udev/rules.d/41-tnc.rules
SUBSYSTEMS=="usb", ATTRS{idProduct}=="7523", ATTRS{idVendor}=="1a86", SYMLINK="tnc"
SUBSYSTEMS=="usb", ATTRS{idProduct}=="6001", ATTRS{idVendor}=="0403", SYMLINK="rotorUSB"
SUBSYSTEM=="tty", KERNEL=="ttyS1", SYMLINK="rotor"
SUBSYSTEM=="tty", KERNEL=="ttyS0", SYMLINK="icom"



 
